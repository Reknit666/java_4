package com.example.lab3_2;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class HelloApplication extends Application {
    private static final int SIZE = 4; // –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (10x10)
    private static final int CELL_SIZE = 40; // –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏
    private static final int NUM_BOMBS = 2; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–±
    private final Cell[][] board = new Cell[SIZE][SIZE]; // –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    private boolean gameOver = false; // –§–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    private GraphicsContext gc;

    @Override
    public void start(Stage stage) {
        initializeBoard(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è

        Canvas canvas = new Canvas(SIZE * CELL_SIZE, SIZE * CELL_SIZE);
        gc = canvas.getGraphicsContext2D(); // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—é –∫–ª–∞—Å—Å–∞
        drawBoard(gc); // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è

        canvas.setOnMouseClicked(this::onClick); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤

        VBox vBox = new VBox();
        vBox.getChildren().addAll(canvas);
        Scene scene = new Scene(vBox);
        stage.setScene(scene);
        stage.setTitle("–°–∞–ø–µ—Ä");
        stage.show();
    }

    private void initializeBoard() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è—á–µ–µ–∫ –∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ–º–±
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                board[i][j] = new Cell(i, j);
            }
        }
        placeBombs(); // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –±–æ–º–±
        calculateNumbers(); // –ü–æ–¥—Å—á–µ—Ç —á–∏—Å–µ–ª –≤–æ–∫—Ä—É–≥ –±–æ–º–±
    }

    private void placeBombs() {
        List<Integer> bombPositions = new ArrayList<>();
        for (int i = 0; i < SIZE * SIZE; i++) {
            bombPositions.add(i);
        }
        Collections.shuffle(bombPositions); // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π

        for (int i = 0; i < NUM_BOMBS; i++) {
            int position = bombPositions.get(i);
            int row = position / SIZE;
            int col = position % SIZE;
            board[row][col].setBomb(true);
        }
    }

    private void calculateNumbers() {
        // –ü–æ–¥—Å—á–µ—Ç —á–∏—Å–µ–ª –≤–æ–∫—Ä—É–≥ –±–æ–º–±
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (!board[i][j].isBomb()) {
                    int count = 0;
                    for (int x = -1; x <= 1; x++) {
                        for (int y = -1; y <= 1; y++) {
                            if (isInBounds(i + x, j + y) && board[i + x][j + y].isBomb()) {
                                count++;
                            }
                        }
                    }
                    board[i][j].setNumber(count);
                }
            }
        }
    }

    private boolean isInBounds(int row, int col) {
        return row >= 0 && row < SIZE && col >= 0 && col < SIZE;
    }

    private void drawBoard(GraphicsContext gc) {
        gc.clearRect(0, 0, SIZE * CELL_SIZE, SIZE * CELL_SIZE); // –û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                board[i][j].draw(gc, j * CELL_SIZE, i * CELL_SIZE); // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
            }
        }
    }

    private void onClick(MouseEvent mouseEvent) {
        if (gameOver) {
            return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏, –µ—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
        }

        double x = mouseEvent.getX();
        double y = mouseEvent.getY();

        int rowIndex = (int) (y / CELL_SIZE);
        int columnIndex = (int) (x / CELL_SIZE);

        if (isInBounds(rowIndex, columnIndex)) {
            Cell clickedCell = board[rowIndex][columnIndex];
            if (!clickedCell.isRevealed()) {
                clickedCell.reveal(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —è—á–µ–π–∫—É
                drawBoard(gc); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ

                if (clickedCell.isBomb()) {
                    gameOver = true; // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                    showGameOverAlert(false);
                } else if (clickedCell.getNumber() == 0) {
                    // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏
                    revealAdjacentCells(rowIndex, columnIndex);
                }

                checkVictory(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
            }
        }
    }

    private void revealAdjacentCells(int row, int col) {
        for (int x = -1; x <= 1; x++) {
            for (int y = -1; y <= 1; y++) {
                int newRow = row + x;
                int newCol = col + y;
                if (isInBounds(newRow, newCol) && !board[newRow][newCol].isRevealed()) {
                    board[newRow][newCol].reveal();
                    drawBoard(gc); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
                    if (board[newRow][newCol].getNumber() == 0) {
                        revealAdjacentCells(newRow, newCol); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏
                    }
                }
            }
        }
    }

    private void checkVictory() {
        boolean allCellsRevealed = true;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (!board[i][j].isRevealed() && !board[i][j].isBomb()) {
                    allCellsRevealed = false;
                }
            }
        }
        if (allCellsRevealed) {
            gameOver = true; // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
            showGameOverAlert(true);
        }
    }

    private void showGameOverAlert(boolean isVictory) {
        Alert alert = new Alert(AlertType.INFORMATION);
        alert.setTitle(isVictory ? "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!" : "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞");
        alert.setHeaderText(isVictory ? "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!" : "–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –±–æ–º–±—É!");
        alert.setContentText(isVictory ? "–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏!" : "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
        alert.showAndWait(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    }

    public static void main(String[] args) {
        launch(args);
    }

    // –í–ª–æ–∂–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —è—á–µ–µ–∫
    static class Cell {
        private final int row; // –°—Ç—Ä–æ–∫–∞
        private final int col; // –°—Ç–æ–ª–±–µ—Ü
        private boolean isBomb = false; // –°—Ç–∞—Ç—É—Å –±–æ–º–±—ã
        private boolean revealed = false; // –°—Ç–∞—Ç—É—Å –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏
        private int number = 0; // –ß–∏—Å–ª–æ –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏

        public Cell(int row, int col) {
            this.row = row;
            this.col = col;
        }

        public void draw(GraphicsContext gc, int x, int y) {
            if (revealed) {
                // –†–∏—Å—É–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é —è—á–µ–π–∫—É
                gc.setFill(Color.LIGHTGRAY);
                gc.fillRect(x, y, CELL_SIZE, CELL_SIZE);
                gc.strokeRect(x, y, CELL_SIZE, CELL_SIZE); // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É
                if (isBomb) {
                    gc.setFill(Color.RED);
                    gc.fillText("üí£", x + CELL_SIZE / 4, y + CELL_SIZE * 3 / 4);
                } else {
                    if (number > 0) {
                        gc.setFill(javafx.scene.paint.Color.BLACK);
                        gc.fillText(String.valueOf(number), x + CELL_SIZE / 4, y + CELL_SIZE * 3 / 4);
                    }
                }
            } else {
                // –†–∏—Å—É–µ–º –∑–∞–∫—Ä—ã—Ç—É—é —è—á–µ–π–∫—É
                gc.setFill(javafx.scene.paint.Color.GRAY);
                gc.fillRect(x, y, CELL_SIZE, CELL_SIZE);
                gc.strokeRect(x, y, CELL_SIZE, CELL_SIZE); // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É
            }
        }

        public void reveal() {
            this.revealed = true; // –û—Ç–∫—Ä—ã–≤–∞–µ–º —è—á–µ–π–∫—É
        }

        public void setBomb(boolean isBomb) {
            this.isBomb = isBomb; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ–º–±—ã
        }

        public void setNumber(int number) {
            this.number = number; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∏—Å–ª–æ –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏
        }

        public boolean isBomb() {
            return isBomb; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ–º–±—ã
        }

        public boolean isRevealed() {
            return revealed; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏
        }

        public int getNumber() {
            return number; // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏
        }
    }
}
